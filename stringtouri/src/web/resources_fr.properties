# Contenu textuel français pour l'IHM du module de conversion StringToURI.
# ============================================================================
# Contenus textuels principaux.
stringtouri.title       = StringToURI
stringtouri.button      = Transformation des Strings en URIs
stringtouri.description = StringToURI est un module d'interconnexion qui remplace des valeurs littérales par les URIs des entités décrites par ces valeurs. Par exemple, pour un triplet &lt;http://example.org/mecs/Bob&gt; ex:vitEn "France", on pourrait souhaiter que la chaîne de caractères "France" soit remplacée par une URI vers l'entité de classe Pays correspondant à la valeur "France". À l'issue du processus d'interconnexion de StringToURI, on aura ainsi : &lt;http://example.org/mecs/Bob&gt; ex:vitEn &lt;http://example.org/pays/France&gt;.
#
# ============================================================================
# Labels génériques.
project.label   = Projet {0}
update.confirm  = La modification des données sera permanente.
help.label      = Aide 
help.title      = Afficher l'aide
cancel.label    = Annuler
cancel.title    = Retour à l' 
back.label      = Retour
back.title      = Retour au formulaire
preview.label   = Aperçu
preview.title   = Prévisualiser les modifications
run.label       = Exécuter
run.title       = Lancer l'interconnexion
modified.label  = Données à modifier
reference.label = Données de référence
#
warning.label               = Attention
warning.info                = Ce module nécessite que JavaScript soit activé pour pouvoir fonctionner correctement.
#
# ============================================================================
# Éléments du formulaire.
dataset.label         = Nom du jeu
dataset.info.target   = Nom du jeu de données à modifier
dataset.help.target   = Ce jeu de données Datalift est celui que l'on souhaite modifier. Les nouvelles valeurs proviendront du jeu référence.
dataset.info.source   = Nom du jeu de données référence 
dataset.help.source   = Ce jeu de données nous sert de référence pour nos modifications. On en extrait les données à recopier dans l'autre jeu.
#
class.label           = Classe à utiliser
class.info.target     = Classe du prédicat à modifier
class.help.target     = Cette classe permet de filtrer sur quelles entités vont se porter les modifications si le prédicat à utiliser est partagé par plusieurs classes d'entités.
class.info.source     = Classe du prédicat à utiliser
class.help.source     = Cette classe permet de filtrer de quelles entités on explorera les prédicats si le prédicat référence est partagé par plusieurs classes d'entités.
#
predicate.label       = Prédicat à comparer
predicate.info.target = Prédicat des objets à modifier
predicate.help.target = Ce prédicat est celui dont on va modifier les valeurs. Chaque valeur pré-traitement va être comparée à celles du prédicat référence et mise à jour en cas d'égalité.
predicate.info.source = Prédicat des objets à utiliser
predicate.help.source = Ce prédicat sert de référence: si l'une de ses valeurs est présente dans le jeu à modifier, alors elle sera remplacée par l'URI de l'entité reliée à la valeur en question.
#
field.mandatory       = Obligatoire
field.optional        = Optionnel
field.example         = Exemple
field.none            = Aucune
#
# ============================================================================
# Éléments de tableau.
result.title            = Nouveaux triplets créés par
source.grid.row.heading = #
rdf.voc.subject         = Sujet
rdf.voc.predicate       = Prédicat
rdf.voc.object          = Objet
#
# ============================================================================
# Erreurs de validation.
error.title             = Oh non !
error.label             = Erreur
#
error.samedatasets      = Les deux jeux de données doivent être différents.
error.datasetnotfound   = Ce jeu de données n'existe pas dans
error.classnotfound     = Cette classe n'existe pas dans
error.predicatenotfound = Ce prédicat n'existe pas dans

