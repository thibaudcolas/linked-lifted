# English textual content for the StringToURI converter module GUI.
# ============================================================================
# Principal textual content.
stringtouri.title       = StringToURI
stringtouri.button      = String to URI Transform
stringtouri.description = StringToURI is an interconnection module which replaces literal values by the URIs to the entities which they describe. For example, for a given triple &lt;http://example.org/guys/Bob&gt; ex:livesIn "France", we might want to replace the string value "France" by a URI to the RDF entity of class Country corresponding to the "France" value. At the end of the StringToURI interconnection process, we'll obtain : &lt;http://example.org/guys/Bob&gt; ex:livesIn &lt;http://example.org/countries/France&gt;.
#
# ============================================================================
# Generic labels.
project.label   = {0} Project
update.confirm  = The data will be modified permanently.
help.label      = Help
help.title      = Show the help menu
cancel.label    = Cancel
cancel.title    = Go back to the 
back.label      = Go back
back.title      = Go back to the form
preview.label   = Preview
preview.title   = Just preview modifications
run.label       = Run 
run.title       = Run the interlinking
modified.label  = Data to be modified
reference.label = Data to use as reference
#
warning.label               = Warning
warning.info                = This module requires JavaScript to be enabled in order to work properly.
#
# ============================================================================
# Form elements.
dataset.label         = Dataset name
dataset.info.target   = Name of the to be modified dataset
dataset.help.target   = This Datalift dataset is the one we want to be updated. The new values will come from the reference dataset.
dataset.info.source   = Name of the reference dataset
dataset.help.source   = This dataset is our modifications' reference. We extract its data to copy it to the target dataset.
#
class.label           = Class to use
class.info.target     = Name of the to be modified predicate's class
class.help.target     = This class helps filtering entities for which we will update data if the predicate to be used is shared between multiple entity classes.
class.info.source     = Name of the reference predicate's class
class.help.source     = This class helps filtering from which entities we will explore predicates if the reference predicate is shared between multiple entity classes.
#
predicate.label       = Predicate to match
predicate.info.target = To be modified objects' predicate
predicate.help.target = This predicate to be updated. Each pre-process value is going to be matched to those of the reference predicate and updated if matches are found.
predicate.info.source = Reference objects' predicate
predicate.help.source = This is the reference predicate: if one of its values is inside the target dataset, then it will be replaced by the entities' URI for the given value.
#
field.mandatory       = Required
field.optional        = Optional
field.example         = Exemple
field.none            = None
#
# ============================================================================
# Table elements
result.title            = New triples created by
source.grid.row.heading = #
rdf.voc.subject         = Subject
rdf.voc.predicate       = Predicate
rdf.voc.object          = Object
#
# ============================================================================
# Validation errors.
error.title             = Oh snap !
error.label             = Error
#
error.samedatasets      = The two datasets must be different.
error.datasetnotfound   = This dataset does not exist in
error.classnotfound     = This class does not exist in
error.predicatenotfound = This predicate does not exist in

